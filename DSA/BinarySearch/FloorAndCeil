**Problem:**
We need to find the **floor** and **ceil** of a given number `x` in a **sorted array**.

* The **floor** of `x` is the **greatest element less than or equal to `x`**.
* The **ceil** of `x` is the **smallest element greater than or equal to `x`**.

If either doesnâ€™t exist, we return **-1** for that value.

---

### **Brute Force:**

* **Intuition:**
  Traverse the entire array to find elements that satisfy the floor and ceil conditions.

  * For **floor**: find the maximum element â‰¤ `x`.
  * For **ceil**: find the minimum element â‰¥ `x`.
    We can do this using two passes or one combined pass through the array.
* **Time Complexity:**
  **O(N)** â€” We may need to look at every element.
* **Space Complexity:**
  **O(1)** â€” Only a few variables used for storing results.

---

### **Optimal:**

* **Intuition:**
  Since the array is **sorted**, we can use **Binary Search** to efficiently find both floor and ceil.

  * **For Floor:**

    * Maintain `low = 0`, `high = n - 1`, and `ans = -1`.
    * If `arr[mid] â‰¤ x`, this could be a valid floor â†’ store it in `ans` and move `low = mid + 1` to search for a larger possible floor.
    * Else, move `high = mid - 1`.
  * **For Ceil:**

    * Maintain `low = 0`, `high = n - 1`, and `ans = -1`.
    * If `arr[mid] â‰¥ x`, this could be a valid ceil â†’ store it in `ans` and move `high = mid - 1` to find a smaller possible ceil.
    * Else, move `low = mid + 1`.
      Both searches take **O(log N)** each, so total complexity is **O(2 Ã— log N) = O(log N)**.
* **Time Complexity:**
  **O(log N)** â€” Binary search halves the search range each time.
* **Space Complexity:**
  **O(1)** â€” Only constant extra variables are used.

---

### ðŸ§  **Summary Table**

| Operation | Meaning              | Time Complexity | Space Complexity |
| --------- | -------------------- | --------------- | ---------------- |
| Floor     | Greatest element â‰¤ x | O(log N)        | O(1)             |
| Ceil      | Smallest element â‰¥ x | O(log N)        | O(1)             |

---

### ðŸ’¡ **Example**

**Input:**
`arr = [3, 4, 4, 7, 8, 10]`, `x = 5`

**Output:**
`Floor = 4`, `Ceil = 7`

**Explanation:**

* The greatest element â‰¤ 5 is **4** â†’ floor.
* The smallest element â‰¥ 5 is **7** â†’ ceil.
