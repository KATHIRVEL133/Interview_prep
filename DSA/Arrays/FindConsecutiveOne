Here are the **structured coding notes** for your program in your preferred format ðŸ‘‡

---

### **Problem:**

We have to find the **maximum number of consecutive 1â€™s** in a binary array.

---

### **Intuition:**

We can keep a counter that tracks the current streak of consecutive 1â€™s.
Whenever a `0` appears, we reset the counter.
Meanwhile, we maintain a variable `maxi` to record the **maximum streak length** seen so far.

---

### **Steps / Approach:**

1. Initialize two variables:

   * `cnt = 0` â†’ to count current consecutive 1â€™s.
   * `maxi = 0` â†’ to store the maximum count found.
2. Traverse the array:

   * If the current element is `1`, increment `cnt`.
   * If the current element is `0`, reset `cnt` to `0`.
3. After each step, update `maxi = max(maxi, cnt)`.
4. After traversing the entire array, `maxi` will store the result.

---

### **Example:**

**Input:**
`nums = [1, 1, 0, 1, 1, 1]`

**Process:**

* Start with `cnt = 0, maxi = 0`
* 1 â†’ `cnt = 1, maxi = 1`
* 1 â†’ `cnt = 2, maxi = 2`
* 0 â†’ `cnt = 0`
* 1 â†’ `cnt = 1, maxi = 2`
* 1 â†’ `cnt = 2, maxi = 2`
* 1 â†’ `cnt = 3, maxi = 3`

**Output:**
`The maximum consecutive 1's are 3`

---

### **Time Complexity:**

**O(N)** â€” single traversal of the array.

---

### **Space Complexity:**

**O(1)** â€” uses only a few extra variables.

---

### **Notes:**

* Works efficiently in a **single pass**.
* Useful in binary problems, bit manipulation, or data stream processing.
* Can be easily adapted to find **consecutive occurrences of any element**, not just `1`.

---
